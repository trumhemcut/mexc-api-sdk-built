"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromatData = exports.isEmptyValue = exports.removeEmptyValue = exports.buildQueryString = exports.createRequest = void 0;
const sync_request_1 = require("sync-request");
const createRequest = (config) => {
    const { baseURL, method, url, headers } = config;
    return sync_request_1.default(method, `${baseURL}${url}`, { headers });
};
exports.createRequest = createRequest;
const stringifyKeyValuePair = ([key, value]) => {
    /*
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986

    Also encodes ( and ) characters.
    */
    return `${key}=${encodeURIComponent(value).replace(/[()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`)}`;
};
const removeEmptyValue = (obj) => {
    if (!(obj instanceof Object))
        return {};
    Object.keys(obj).forEach(key => isEmptyValue(obj[key]) && delete obj[key]);
    return obj;
};
exports.removeEmptyValue = removeEmptyValue;
const isEmptyValue = (input) => {
    /**
     * input is considered empty value: falsy value (like null, undefined, '', except false and 0),
     * string with white space characters only, empty array, empty object
     */
    return (!input && input !== false && input !== 0) ||
        ((input instanceof String || typeof input === 'string') && !input.trim()) ||
        (Array.isArray(input) && !input.length) ||
        (input instanceof Object && !Object.keys(input).length);
};
exports.isEmptyValue = isEmptyValue;
const buildQueryString = (params) => {
    if (!params)
        return '';
    return Object.entries(params)
        .map(stringifyKeyValuePair)
        .join('&');
};
exports.buildQueryString = buildQueryString;
const fromatData = (datas) => {
    if (Array.isArray(datas)) {
        return datas.map((data) => {
            return fromatData(data);
        });
    }
    else if (typeof datas === "object" && datas !== null) {
        const newObj = {};
        Object.entries(datas).map(([key, value]) => newObj[key] = fromatData(value));
        return newObj;
    }
    else {
        return (datas === undefined || datas === null) ? "" : datas;
    }
};
exports.fromatData = fromatData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0NBQW1DO0FBRW5DLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUU7SUFDbEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQTtJQUNoRCxPQUFPLHNCQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsT0FBTyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtBQUMzRCxDQUFDLENBQUE7QUFxREcsc0NBQWE7QUFuRGpCLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQVEsRUFBRSxFQUFFO0lBQ2xEOzs7O01BSUU7SUFDRixPQUFPLEdBQUcsR0FBRyxJQUFJLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FDOUMsT0FBTyxFQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQzFELEVBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQTtBQUVELE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUNsQyxJQUFHLENBQUMsQ0FBQyxHQUFHLFlBQVksTUFBTSxDQUFDO1FBQUUsT0FBTyxFQUFFLENBQUE7SUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUMxRSxPQUFPLEdBQUcsQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQXFDRyw0Q0FBZ0I7QUFuQ3BCLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7SUFDaEM7OztPQUdHO0lBQ0gsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsS0FBSyxZQUFZLE1BQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6RSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLENBQUMsS0FBSyxZQUFZLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDL0QsQ0FBQyxDQUFBO0FBMkJHLG9DQUFZO0FBekJoQixNQUFNLGdCQUFnQixHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUU7SUFDckMsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUN0QixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1NBQzFCLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQztTQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDaEIsQ0FBQyxDQUFBO0FBa0JHLDRDQUFnQjtBQWhCcEIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFVLEVBQU8sRUFBRTtJQUNuQyxJQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDckIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7WUFDM0IsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDM0IsQ0FBQyxDQUFDLENBQUE7S0FDTDtTQUFNLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7UUFDaEQsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFBO1FBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFRLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUNuRixPQUFPLE1BQU0sQ0FBQztLQUNyQjtTQUFNO1FBQ0gsT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtLQUM5RDtBQUNMLENBQUMsQ0FBQTtBQU9HLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlcXVlc3QgZnJvbSBcInN5bmMtcmVxdWVzdFwiO1xuXG5jb25zdCBjcmVhdGVSZXF1ZXN0ID0gKGNvbmZpZzogYW55KSA9PiB7XG4gICAgY29uc3QgeyBiYXNlVVJMLCBtZXRob2QsIHVybCwgaGVhZGVycyB9ID0gY29uZmlnXG4gICAgcmV0dXJuIHJlcXVlc3QobWV0aG9kLCBgJHtiYXNlVVJMfSR7dXJsfWAsIHsgaGVhZGVycyB9KVxufVxuXG5jb25zdCBzdHJpbmdpZnlLZXlWYWx1ZVBhaXIgPSAoW2tleSwgdmFsdWVdOiBhbnlbXSkgPT4ge1xuICAgIC8qXG4gICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZW5jb2RlVVJJQ29tcG9uZW50I2VuY29kaW5nX2Zvcl9yZmMzOTg2XG5cbiAgICBBbHNvIGVuY29kZXMgKCBhbmQgKSBjaGFyYWN0ZXJzLlxuICAgICovXG4gICAgcmV0dXJuIGAke2tleX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoXG4gICAgICAgIC9bKCldL2csXG4gICAgICAgIChjKSA9PiBgJSR7Yy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWBcbiAgICApfWBcbn1cblxuY29uc3QgcmVtb3ZlRW1wdHlWYWx1ZSA9IChvYmo6IGFueSkgPT4ge1xuICAgIGlmKCEob2JqIGluc3RhbmNlb2YgT2JqZWN0KSkgcmV0dXJuIHt9XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGtleSA9PiBpc0VtcHR5VmFsdWUob2JqW2tleV0pICYmIGRlbGV0ZSBvYmpba2V5XSlcbiAgICByZXR1cm4gb2JqXG59XG5cbmNvbnN0IGlzRW1wdHlWYWx1ZSA9IChpbnB1dDogYW55KSA9PiB7XG4gICAgLyoqXG4gICAgICogaW5wdXQgaXMgY29uc2lkZXJlZCBlbXB0eSB2YWx1ZTogZmFsc3kgdmFsdWUgKGxpa2UgbnVsbCwgdW5kZWZpbmVkLCAnJywgZXhjZXB0IGZhbHNlIGFuZCAwKSxcbiAgICAgKiBzdHJpbmcgd2l0aCB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzIG9ubHksIGVtcHR5IGFycmF5LCBlbXB0eSBvYmplY3RcbiAgICAgKi9cbiAgICByZXR1cm4gKCFpbnB1dCAmJiBpbnB1dCAhPT0gZmFsc2UgJiYgaW5wdXQgIT09IDApIHx8XG4gICAgICAgICgoaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmcgfHwgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykgJiYgIWlucHV0LnRyaW0oKSkgfHxcbiAgICAgICAgKEFycmF5LmlzQXJyYXkoaW5wdXQpICYmICFpbnB1dC5sZW5ndGgpIHx8XG4gICAgICAgIChpbnB1dCBpbnN0YW5jZW9mIE9iamVjdCAmJiAhT2JqZWN0LmtleXMoaW5wdXQpLmxlbmd0aClcbn1cblxuY29uc3QgYnVpbGRRdWVyeVN0cmluZyA9IChwYXJhbXM6IGFueSkgPT4ge1xuICAgIGlmICghcGFyYW1zKSByZXR1cm4gJydcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMocGFyYW1zKVxuICAgICAgLm1hcChzdHJpbmdpZnlLZXlWYWx1ZVBhaXIpXG4gICAgICAuam9pbignJicpXG59XG5cbmNvbnN0IGZyb21hdERhdGEgPSAoZGF0YXM6IGFueSk6IGFueSA9PiB7XG4gICAgaWYoQXJyYXkuaXNBcnJheShkYXRhcykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFzLm1hcCgoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbWF0RGF0YShkYXRhKVxuICAgICAgICB9KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGFzID09PSBcIm9iamVjdFwiICYmIGRhdGFzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdPYmo6IGFueSA9IHt9XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhcykubWFwKChba2V5LCB2YWx1ZV06IGFueVtdKSA9PiBuZXdPYmpba2V5XSA9IGZyb21hdERhdGEodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKGRhdGFzID09PSB1bmRlZmluZWQgfHwgZGF0YXMgPT09IG51bGwpID8gXCJcIiA6IGRhdGFzXG4gICAgfVxufVxuXG5leHBvcnQge1xuICAgIGNyZWF0ZVJlcXVlc3QsXG4gICAgYnVpbGRRdWVyeVN0cmluZyxcbiAgICByZW1vdmVFbXB0eVZhbHVlLFxuICAgIGlzRW1wdHlWYWx1ZSxcbiAgICBmcm9tYXREYXRhXG59Il19